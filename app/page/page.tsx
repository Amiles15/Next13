'use client'

import React, { useEffect, useState } from "react";
import NavComp from "../Component/Navbar/nav";
import { getData, getImageUrl, postMatchaMenu } from "./apicall/apicallservice";
import { Menuinterface } from "../Interface/menuinterface";
import { cartInterface } from "../Interface/cartiteminterface";
import { toast } from "sonner";

export const metadata = {
  title: "Menu",
  description: "Generated by create next app",
};

const Page = () => {
  
  const [matchaMenu, SetmacthaMenu] = useState<Menuinterface[]>([]);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [searchQuery, setSearchQuery] = useState("");
  const [showMore, setShowMore] = useState(false);
  const [visibleItems, setVisibleItems] = useState(6);
  const [jumlah, setJumlah] = React.useState(1);


  useEffect(() => {
    const fetchMenuData = async () => {
      try {
        const data = await getData();
        console.log("Fetched data:", data);
        SetmacthaMenu(data); // Set the fetched data to state
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchMenuData();
  }, []);

  const handleCategory = (event: any) => {
    setSelectedCategory(event.target.value);
  };

  const handleSearchInputChange = (event: any) => {
    setSearchQuery(event.target.value);
  };

  const handleShowMore = () => {
    setVisibleItems(filteredMenu.length);
    setShowMore(true);
  };

  // Filtered menu items based on selected category and search query
  const filteredMenu = matchaMenu.filter(menuItem => {
    if (selectedCategory === '') {
      return menuItem.title.toLowerCase().includes(searchQuery.toLowerCase());
    } else {
      return menuItem.title.toLowerCase().includes(searchQuery.toLowerCase()) && menuItem.category === selectedCategory;
    }
  });

  const AddToCart = async (menuItem: Menuinterface, jumlah: number) => {
    try {
      const cartItem:cartInterface = {
        _id: menuItem._id || '', // Ensure _id is present and convert to string
        title: menuItem.title,
        description: menuItem.description,
        harga: menuItem.harga,
        category: menuItem.category,
        imagePath: menuItem.imagePath,
        jumlah: jumlah // Use jumlah from the local state
      };
  
      const response = await postMatchaMenu(cartItem);
      if (response) {
        toast.success('Data Berhasil Di Kirim');
          // Handle success as needed
      } else {
        toast.error('Error Terjadi Kesalahan');
          // Handle error as needed
      }
    } catch (error) {
      console.error('Error adding item to cart:', error);
        // Handle error
    }
  }

  const handleInputChange = (event:any) => {
    const inputValue = parseInt(event.target.value) || 0; // Parse input value to an integer
    setJumlah(inputValue); // Update jumlah state
  };

  return (
    <>
      <NavComp loggedInUser={null}></NavComp>
      <div className="w-full flex items-center justify-center px-4 mb-2 p-20">
        <div>
          <div className="flex items-center">
            <p className="px-4 my-4">Search By Category :</p>
            <form className="">
              <div className="flex">
                <div className="relative">
                  <select id="search-dropdown" onChange={handleCategory} style={{ padding: '0.65rem', height: '2.5rem' }} className="btn px-4 text-sm font-medium text-gray-900 bg-gray-100 border border-gray-300 rounded-s-lg hover:bg-gray-200 focus:ring-4 focus:outline-none focus:ring-gray-100 dark:bg-gray-700 dark:hover:bg-gray-600 dark:focus:ring-gray-700 dark:text-white dark:border-gray-600 ">
                    <option className="" value="">All Categories</option>
                    <option value="Matcha">Matcha</option>
                    <option value="Non Matcha">Non Matcha</option>
                  </select>
                </div>
                <div className="relative w-full">
                  <input type="search" style={{ padding: '0.65rem', height: '2.5rem' }} onChange={handleSearchInputChange} className="block w-full z-20 text-sm text-gray-900 bg-gray-50 rounded-e-lg border-s-gray-50 border-s-2 border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-s-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:border-blue-500" />
                  <button type="button" className="absolute top-0 end-0 p-2 text-sm font-medium h-full text-white bg-blue-700 rounded-e-lg border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                    <svg className="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                      <path stroke="currentColor" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
                    </svg>
                    <span className="sr-only">Search</span>
                  </button>
                </div>
              </div>
            </form>
          </div>
        
          <div className="grid grid-cols-2 gap-4">
            {filteredMenu.slice(0, visibleItems).map((menuItem) => (
              <div className="px-3 mb-5" key={menuItem._id}>
                <div className="max-w-md p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
                  <figure>
                    <img src={getImageUrl(menuItem.imagePath)} alt="Matcha" className="mx-auto max-w-full" />
                  </figure>
                  <a href="#">
                    <h5 className="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">
                      {menuItem.title}
                    </h5>
                  </a>
                  <p className="mb-3 font-normal text-gray-700 dark:text-gray-400">
                    {menuItem.description}
                  </p>
                  <p className="mb-3 font-normal text-gray-700 dark:text-gray-400">
                    Rp. {`${menuItem.harga}`}
                  </p>    
                  <div className="flex items-center justify-center w-full gap-2">
                    <svg className="fill-current text-gray-600 w-3" viewBox="0 0 448 512">
                      <path d="M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z" />
                    </svg>
                    <input
                      className="mx-2 border text-center w-8"
                      type="number"
                      value={jumlah}
                      onChange={handleInputChange}
                    />
                    <svg className="fill-current text-gray-600 w-3" viewBox="0 0 448 512">
                      <path d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z" />
                    </svg>
                    <button onClick={() => AddToCart(menuItem, jumlah)} className="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                      Beli Minuman
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div> 
          {filteredMenu.length > 6 && !showMore && (
            <div className="flex">
              <button
                onClick={handleShowMore}
                className="mx-auto px-4 py-2 text-sm font-medium text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
              >
                Show More
              </button>
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default Page;
